
**************************** API Status Codes *****************************************

1xx - Informational response,task in progress
2xx - Success         | 200 Ok , 201 Created
3xx - Redirection
4xx - Client Errors   | 404 not found , 403 Forbidden ,  issue with client request
5xx - Server Errors   | Request is fine but server fails to process

------------------------------------------------------------------------------------
**************************** Authentication *******************************************

** OAuth 2.0 **

OAuth 2.0 is an authorization framework that enables a third-party application to obtain limited access to an HTTP service, either on behalf of a resource owner or by allowing the third-party application to obtain access on its own behalf.
It's commonly used for delegated authorization, such as allowing a third-party application to access a user's data without exposing the user's credentials.
OAuth2 typically involves the exchange of tokens, such as access tokens and refresh tokens, to grant access to protected resources.

** Basic Authentication **

Basic authentication is a simple authentication scheme built into the HTTP protocol. It involves sending a username and password with each HTTP request.
The credentials are typically encoded (not encrypted) using Base64 encoding and included in the HTTP header.
Despite its simplicity, Basic Authentication is considered less secure compared to other authentication methods because credentials are sent with every request, making them susceptible to interception if not used over HTTPS.
Token-based Authentication:

** Token-based authentication **

Token-based authentication involves issuing a unique token (e.g., JSON Web Token or JWT) to authenticated users after successful login.
The token is then sent with each subsequent request to authenticate the user.
This approach eliminates the need to store user credentials on the server, enhancing security. Tokens often have an expiration time, and they can be revoked if necessary.

** Certificate-based Authentication **

Certificate-based authentication uses digital certificates to authenticate the identity of users, devices, or services.
Each entity (user, device, etc.) is issued a unique digital certificate, which includes a public key and other identifying information.
During authentication, the entity presents its certificate, and the server verifies its authenticity using a trusted certificate authority (CA).
This method provides a strong level of security and is commonly used in enterprise environments and secure web services.


**************************** JDBC Connection *****************************************

// Define the SQL query
String sql = "SELECT * FROM tableName";

try {
    // Establish a connection to the database
    Connection connection = DriverManager.getConnection(URL, USER, PASS);

    // Prepare the SQL statement
    PreparedStatement statement = connection.prepareStatement(sql);

    // Execute the query and retrieve the results
    ResultSet resultSet = statement.executeQuery();

    // Process the results (not shown in this code snippet)

    // Close the resources to release them properly
    resultSet.close();
    statement.close();
    connection.close();
} catch (SQLException e) {
    // Handle any errors that occur during database operations
    e.printStackTrace();
}

------------------------------------------------------------------------------------

**************************** RestAssured Library *****************************************

- Java library to test REST APIs

@Test
public void testRest(){
//given() creates request specifications
Response response = given()
                        .accept(ContentType.JSON)
                        .header(header)
                        .when()
                        .get("http://baseusr + endpoint")

Assert.assertEquals(response.getStatusCode(), 200)

}

**************************** SQL *********************************************************

AGGREGATE FUNCTIONS
SELECT COUNT(*) FROM TABLENAME
SELECT SUM(SALARY) FROM TABLENAME
SELECT AVG(SALARY) FROM TABLENAME
SELECT MIN(SALARY) FROM TABLENAME
SELECT MAX(SALART) FROM TABLENAME


******* SUB QUERY IN SQL **********

- SELECT * FROM TABLE WHERE ID = (SELECT ID FROM TABLE WHERE NAME= 'AMIT')


******* Joins *********************

INNER JOIN: Returns only the rows that have matching values in both tables.
LEFT JOIN: Returns all rows from the left table, and the matched rows from the right table. If there's no match, NULL values are returned for the columns from the right table.
RIGHT JOIN: Returns all rows from the right table, and the matched rows from the left table. If there's no match, NULL values are returned for the columns from the left table.
Question: How can you add a new column to an existing table in PostgreSQL?

1.) FIND SECOND HIGHEST VALUE ?
//todo

2.) Explain the difference between INNER JOIN, LEFT JOIN, and RIGHT JOIN in PostgreSQL.
//todo

------------------------------------------------------------------------------------
